Functions, Classes, Objects, Traits, and numerous other special types of functionality used by PHP and other languages are used in this project in such a way to provide an obvious and simple way to identify them.

The project loosely follows the drupal project coding scheme, but one specific exception is "camel casing", which is exclusively denied by this project.
All names used should be lower cased.
Local variables do not have name prefixes such as the ones described below.

The following is the naming scheme used to communicate what a particular name is:
  - f_: This represent a function.
  - c_: This represents a class name.
  - t_: This represents a class trait.

Within a class object, special rules apply:
  1) f_ is not prefixed on function names.
  2) p_ is prefixed for private classes and protected classes that are intended to be private (via the use of final in the final class).
  3) s_ is prefixed for static class function names.
  4) All non-private and protected classes intended to be public must not be prefixed with p_.
  5) Common operations will have the following prefixes:
    - get_: To load, return, or otherwise obtain some data, such as the value of a variable defined within a class.
    - set_: To save, edit, other otherwise alter some data, such as a vlaue of a variable defined within a class.
    - push_: Is used to send or write to something that might be remote and is not a variable in this class.
    - pull_: Is used to retrieve or load something that might be remote and is not a variable in this class.
  6) Initialization and de-initialization should be used. (This note needs to be moved elsewhere, but was written down here while my mind was on the topic.)
    - All classes must unset() all variables during de-initialization.
      - This is done to help encourage the freeing of memory for when a garbage collection is performed.

All uppercase letters represents some form of global variable, be it within a class object or used as a 'define'.

All functions, classes, etc.. that are part of the API should be grouped in some manner based on their purpose or the best fit purpose.
Each of these overarching purposes should be represented by a single word that can act as a prefix.
This prefix must be applied after the type prefix.
  - For example, all basic functionality is grouped by 'base_'.
  - A function defined within the base group would therefore be prefixed with: 'f_base_'.

Sub-group prefixes are also allowed.
To keep things simple, try to keep names and purposes limited to a single sub-group.
If more complexity is needed, uses classes to prevent using more than 1 sub-group prefix.
