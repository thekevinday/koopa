This focuses on database access roles that are being considered standard.

This is a minimal set of roles to be used for access to the database and its underlining functionality.
This minimal set naming scheme is then to be used by many of the example projects provided within this repository.
Systems may also impose a sub-set of access roles used within the database via tables, those such roles do not gain the security advantages but are more flexible.


The roles:
- administer:
  - This is essentially the root account as is intended to have (almost) full access to everything.
  - There is a small set of actions that are restricted, generally for integrity reasons, see the appropriate database sql files of a given project for details.

- manager:
  - This is essentially a non-technical administer account.
  - This grants the user almost full control to the system except for highly technical areas.
  - For the most part, when administer is given access to some table, view, etc.. so is manager.
  - Should never be allowed to create administer users, but should be able to create other accounts.

- auditor:
  - Thus role is intended for users who may need to view and review the system for auding/legal reasons.
  - Generally, this should have read (select) access to everything, especially logs, but should never be able to write to anything.

- publisher:
  - This role is intended for users who should have access to make information public.
  - A publisher does not make changes other than acting as a final approver.

- insurer:
  - This role is intended for users who need to be involved in insurance related information.

- financer:
  - This role is intended for users involve in finance or financially related information.

- reviewer:
  - This role is intended for users who need to approve, deny, or otherwise be involved in some sort of workflow process.
  - It should be very common for projects to have a sub-set of reviewer access roles via tables.

- editor:
  - This role is intended for users who need to make changes (edit content).
  - This role does not grant the access to create any content or make any requests.
  - With the reservation system example. thos would be a request for a reservation.

- drafter:
  - This role is intended for users who create content but are not allowed to publish that content.
  - This is primarily used for workflow.

- requester:
  - This role is intended for users who need to make a request.
  - With the reservation system example. thos would be a request for a reservation.

- r_(system):
  - Replace (system) with the appropriate name for the system, generally the database name (for example, the reservation system, this would be r_reservation).
  - Provides basic access to the database, such as ldap integration.
  - All other roles should be a sub-set of this role.
  - Do not confuse this with "r_(system)_user" (described below), which is considered a special-case user account.
  - All users should be part of this role.

- r_(system)_public:
  - Provides access to the database but only for information that should be made available to the world.
  - This role has the least amount of access.
  - Should not be assigned to any user with the (system)_users role or any such subset.


These roles can be further grouped based on major type of access control purposes.
There are five groups:
- Management Group:
  - administer, manager.
  - These are the administrative accounts and generally have full if not almost full access to the entire database.

- Legal Group:
  - auditor
  - These are for special accounts that (often for legal reasons) need full read access to the entire database.

- Special Group:
  - publisher, insurer, financer, reviewer, drafter
  - These are for accounts that are non-administrative but have additional access to the database beyond basic user access.

- Basic Group:
  - r_(system)_user
  - These are for accounts that need login access and are granted access that every user on the system should have access to.

- Public Group:
  - r_(system)_public
  - These are for anonymous accounts and other public access entities.
  - Everything this should be able to access is generally considered public information.


There are also special user accounts:
- u_(system)_public:
  - This account should not require a password to login and essentially represent a public web user.
  - Some systems are designed to be private and require login, these systems generally provided almost no access for u_(system)_public.
  - Because there is no password and all data is considered public, ssl is not needed and access to/from the database should have higher performance than other user accounts.

- u_(system):
  - Replace (system) with the appropriate name for the system, generally the database name (for example, the reservation system, this would be u_reservation).
  - This is the account the system uses for general cron jobs and other automated tasks.
  - The access provided here is dependent to the particular system and therefore this may also have or not have a password.

- u_(system)_(????):
  - Replace (system) with the appropriate name for the system, generally the database name (for example, the reservation system, this would be u_reservation_????).
  - Replace (????) with a custom name specific to the limitation or purpose of the role.
  - Custom database-specific accounts are created to act as a restricted/jailed account to perform certain tasks.
  - These roles are used to prevent users from having direct access to some tables without having to switch to a root user.
  - Postgresql allows views to run as 'security definer', which then grants all such priveleges.
    - By using a restricted/jailed role, any potential damage from accidents or security breaches are reduced.
  - Example: 'u_reservation_statistics_update' is a role that performs updates on statistics tables in the reservation system database.
